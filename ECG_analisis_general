from google.colab import drive
###########

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

import pathlib #librería para cargar datos
import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
from scipy.fftpack import fft, ifft
import scipy

from scipy.signal import butter,lfilter,freqz

from scipy.signal import find_peaks

import pathlib #librería para cargar datos

import re

import matplotlib.pylab as pylab

from PIL import Image as im
#######



sample=pd.read_csv('/content/drive/MyDrive/PYTHON/DATOS_10MIN/01.txt',header=None)
sample=np.array(sample).flatten()
sample=-1*sample
sample=sample-np.mean(sample)
plt.figure(figsize=(15,5))
smooth = scipy.signal.savgol_filter(sample, 10, 5, mode='nearest')
plt.xlim(0,1000)
plt.plot(sample)


def butter_lowpass(cutoff, fs, order=5):
  return butter(order, cutoff, fs=fs, btype='low', analog=False)

def butter_lowpass_filter(data, cutoff, fs, order=5):
    b, a = butter_lowpass(cutoff, fs, order=order)
    y = lfilter(b, a, data)
    return y

cutoff = 3.667 #cutoff frequency in rad/s
fs = 14 #sampling frequency in rad/s
order = 20 #order of filter

y = butter_lowpass_filter(sample, cutoff, fs, order)
plt.xlim(0,1000)
plt.plot(sample)
###########################



plt.specgram(sample, Fs=195, cmap="rainbow")
plt.title('Espectograma de una señal ECG')
plt.xlabel("DATOS")
plt.ylabel("TIEMPO")
cbar = plt.colorbar()
cbar.set_label('Etiquetas de colores')
plt.show()


##########
from scipy.fftpack import fft, ifft
X = fft(sample)
N = len(X)
n = np.arange(N)
# get the sampling rate
sr = 195
T = N/sr
freq = n/T

# Get the one-sided specturm
n_oneside = N//2
# get the one side frequency
f_oneside = freq[:n_oneside]

plt.figure(figsize = (12, 6))
#plt.plot(f_oneside, np.abs(X[:n_oneside]), 'b')
plt.plot(f_oneside[1:-1], np.abs(X[:n_oneside])[1:-1], 'b')
plt.xlabel('Freq (Hz)')
plt.ylabel('FFT Amplitude |X(freq)|')
plt.show()


############
dist2=[]
archivo=pd.read_csv('/content/drive/MyDrive/PYTHON/DISTANCIAS_MUESTRAS_NUEVAS/02_DISTANCIA.txt');
for j in range(0, len(archivo)-1):
  dist2.append(float(np.array(archivo)[j+1])-float(np.array(archivo)[j]))

plt.plot(dist2)


################
from scipy.fftpack import fft, ifft
z = fft(dist2)
N = len(z)
n = np.arange(N)
# get the sampling rate
sr = 195
T = N/sr
freq = n/T

# Get the one-sided specturm
n_oneside = N//2
# get the one side frequency
f_oneside = freq[:n_oneside]

plt.figure(figsize = (12, 6))
#plt.plot(f_oneside, np.abs(X[:n_oneside]), 'b')
ejx=f_oneside[:]/100
ejy=np.abs(z[:n_oneside])[:]
ejy=ejy[(ejx>=0.05) & (ejx<=0.4)]
ejx=ejx[(ejx>=0.05) & (ejx<=0.4)]
plt.plot(ejx, ejy, 'b')
plt.xlim((0.05,0.4))
plt.xlabel('Freq (Hz)')
plt.ylabel('FFT Amplitude |X(freq)|')
plt.axvline(x = 0.15, color = 'r', linestyle = '-')
plt.show()

#########


plt.figure(figsize = (12, 6))
#plt.plot(f_oneside, np.abs(X[:n_oneside]), 'b')
plt.plot(np.log(ejx), np.log(ejy), 'b')
plt.xlabel('log(Freq (Hz))')
plt.ylabel('FFT Amplitude |X(freq)|')
plt.axvline(x = np.log(0.15), color = 'r', linestyle = '-')
plt.show()



############
def image_to_array(imagen):
    size=(480,480)
    fig=plt.figure(figsize=(4.8, 4.8))
    fig = plt.specgram(np.array(imagen).flatten(), Fs=195, cmap="gray")
    fig = plt.axis("off")
    fig = plt.tight_layout()
    fig = plt.gcf()
    fig.canvas.draw()
    arr = np.array(fig.canvas.renderer.buffer_rgba())
    gray_arr = np.dot(arr[..., :3], [0.2989, 0.5870, 0.1140])

    # Redimensiona el arreglo al tamaño deseado
    resized_arr = np.resize(gray_arr, size)
    #plt.close(fig)
    # Retorna el arreglo redimensionado
    return resized_arr.flatten()


ejemplo_dir = '/content/drive/MyDrive/PYTHON/DATOS_10MIN' #carpeta donde están los datos
#tiene que estar en la nube con permisos ilimitados
directorio = pathlib.Path(ejemplo_dir)
nombres=[]
for fichero in directorio.iterdir():
    nombres.append(fichero.name)


r = re.compile(r"(\d+)")
nombres.sort(key=lambda x: int(r.search(x).group(1)))
print(nombres)

señales=[] #nuevo arreglo de señales ordenados

for i in range(0,len(nombres)):
 for fichero in directorio.iterdir():
   if fichero.name==nombres[i]:
   # print("true")
    datos=pd.read_csv(fichero,names=[fichero.name])
    señales.append(datos)



imagee=image_to_array(señales[1]).reshape((480,480))
import matplotlib.pylab as pylab
pylab.figure(figsize=(8,8))
pylab.axis('off')
pylab.imshow(imagee,cmap="gray")




############################
cutoff = 3.667 #cutoff frequency in rad/s
fs = 14 #sampling frequency in rad/s
order = 20 #order of filter
sr = 195 #sample rate
filtro=butter_lowpass_filter(sample, cutoff, fs, order)
smooth_muestra = scipy.signal.savgol_filter(filtro, 21, 7, mode='nearest')
plt.plot(smooth_muestra[0:1000])
plt.plot(sample[0:1000])




#####################
plt.specgram(sample, Fs=195, cmap="rainbow")
plt.title('Espectograma de una señal ECG')
plt.xlabel("tiempo")
plt.ylabel("Frec")
cbar = plt.colorbar()
cbar.set_label('Etiquetas de colores')
plt.show()





##############
plt.specgram(smooth_muestra, Fs=195, cmap="rainbow")
plt.title('Espectograma de una señal ECG')
plt.xlabel("tiempo")
plt.ylabel("Frec")
cbar = plt.colorbar()
cbar.set_label('Etiquetas de colores')
plt.show()



###################
plt.specgram(smooth_muestra, Fs=195, cmap="rainbow")
plt.title('Espectograma de una señal ECG')
plt.xlabel("tiempo")
plt.ylabel("Frec")
cbar = plt.colorbar()
cbar.set_label('Etiquetas de colores')
plt.show()




###########
